// Code generated by entc, DO NOT EDIT.

package wordalignment

const (
	// Label holds the string label denoting the wordalignment type in the database.
	Label = "word_alignment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// FieldWord holds the string denoting the word field in the database.
	FieldWord = "word"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldConfidence holds the string denoting the confidence field in the database.
	FieldConfidence = "confidence"
	// EdgeCandidates holds the string denoting the candidates edge name in mutations.
	EdgeCandidates = "candidates"
	// Table holds the table name of the wordalignment in the database.
	Table = "word_alignments"
	// CandidatesTable is the table that holds the candidates relation/edge.
	CandidatesTable = "candidates"
	// CandidatesInverseTable is the table name for the Candidate entity.
	// It exists in this package in order to avoid circular dependency with the "candidate" package.
	CandidatesInverseTable = "candidates"
	// CandidatesColumn is the table column denoting the candidates relation/edge.
	CandidatesColumn = "word_alignment_candidates"
)

// Columns holds all SQL columns for wordalignment fields.
var Columns = []string{
	FieldID,
	FieldStart,
	FieldLength,
	FieldWord,
	FieldToken,
	FieldConfidence,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "word_alignments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"segment_word_alignments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// StartValidator is a validator for the "start" field. It is called by the builders before save.
	StartValidator func(float64) error
	// LengthValidator is a validator for the "length" field. It is called by the builders before save.
	LengthValidator func(float64) error
	// WordValidator is a validator for the "word" field. It is called by the builders before save.
	WordValidator func(string) error
	// ConfidenceValidator is a validator for the "confidence" field. It is called by the builders before save.
	ConfidenceValidator func(float64) error
)
