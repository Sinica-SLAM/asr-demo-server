// Code generated by entc, DO NOT EDIT.

package ent

import (
	"asr-demo-server/pkg/ent/wordalignment"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// WordAlignment is the model entity for the WordAlignment schema.
type WordAlignment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Start holds the value of the "start" field.
	Start float64 `json:"start,omitempty"`
	// Length holds the value of the "length" field.
	Length float64 `json:"length,omitempty"`
	// Word holds the value of the "word" field.
	Word string `json:"word,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Confidence holds the value of the "confidence" field.
	Confidence float64 `json:"confidence,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WordAlignmentQuery when eager-loading is set.
	Edges                   WordAlignmentEdges `json:"edges"`
	segment_word_alignments *string
}

// WordAlignmentEdges holds the relations/edges for other nodes in the graph.
type WordAlignmentEdges struct {
	// Candidates holds the value of the candidates edge.
	Candidates []*Candidate `json:"candidates,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CandidatesOrErr returns the Candidates value or an error if the edge
// was not loaded in eager-loading.
func (e WordAlignmentEdges) CandidatesOrErr() ([]*Candidate, error) {
	if e.loadedTypes[0] {
		return e.Candidates, nil
	}
	return nil, &NotLoadedError{edge: "candidates"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WordAlignment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case wordalignment.FieldStart, wordalignment.FieldLength, wordalignment.FieldConfidence:
			values[i] = new(sql.NullFloat64)
		case wordalignment.FieldID:
			values[i] = new(sql.NullInt64)
		case wordalignment.FieldWord, wordalignment.FieldToken:
			values[i] = new(sql.NullString)
		case wordalignment.ForeignKeys[0]: // segment_word_alignments
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WordAlignment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WordAlignment fields.
func (wa *WordAlignment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wordalignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wa.ID = int(value.Int64)
		case wordalignment.FieldStart:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				wa.Start = value.Float64
			}
		case wordalignment.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				wa.Length = value.Float64
			}
		case wordalignment.FieldWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field word", values[i])
			} else if value.Valid {
				wa.Word = value.String
			}
		case wordalignment.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				wa.Token = value.String
			}
		case wordalignment.FieldConfidence:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field confidence", values[i])
			} else if value.Valid {
				wa.Confidence = value.Float64
			}
		case wordalignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field segment_word_alignments", values[i])
			} else if value.Valid {
				wa.segment_word_alignments = new(string)
				*wa.segment_word_alignments = value.String
			}
		}
	}
	return nil
}

// QueryCandidates queries the "candidates" edge of the WordAlignment entity.
func (wa *WordAlignment) QueryCandidates() *CandidateQuery {
	return (&WordAlignmentClient{config: wa.config}).QueryCandidates(wa)
}

// Update returns a builder for updating this WordAlignment.
// Note that you need to call WordAlignment.Unwrap() before calling this method if this WordAlignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (wa *WordAlignment) Update() *WordAlignmentUpdateOne {
	return (&WordAlignmentClient{config: wa.config}).UpdateOne(wa)
}

// Unwrap unwraps the WordAlignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wa *WordAlignment) Unwrap() *WordAlignment {
	tx, ok := wa.config.driver.(*txDriver)
	if !ok {
		panic("ent: WordAlignment is not a transactional entity")
	}
	wa.config.driver = tx.drv
	return wa
}

// String implements the fmt.Stringer.
func (wa *WordAlignment) String() string {
	var builder strings.Builder
	builder.WriteString("WordAlignment(")
	builder.WriteString(fmt.Sprintf("id=%v", wa.ID))
	builder.WriteString(", start=")
	builder.WriteString(fmt.Sprintf("%v", wa.Start))
	builder.WriteString(", length=")
	builder.WriteString(fmt.Sprintf("%v", wa.Length))
	builder.WriteString(", word=")
	builder.WriteString(wa.Word)
	builder.WriteString(", token=")
	builder.WriteString(wa.Token)
	builder.WriteString(", confidence=")
	builder.WriteString(fmt.Sprintf("%v", wa.Confidence))
	builder.WriteByte(')')
	return builder.String()
}

// WordAlignments is a parsable slice of WordAlignment.
type WordAlignments []*WordAlignment

func (wa WordAlignments) config(cfg config) {
	for _i := range wa {
		wa[_i].config = cfg
	}
}
