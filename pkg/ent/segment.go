// Code generated by entc, DO NOT EDIT.

package ent

import (
	"asr-demo-server/pkg/ent/segment"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Segment is the model entity for the Segment schema.
type Segment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type segment.Type `json:"type,omitempty"`
	// Start holds the value of the "start" field.
	Start float64 `json:"start,omitempty"`
	// Length holds the value of the "length" field.
	Length float64 `json:"length,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SegmentQuery when eager-loading is set.
	Edges            SegmentEdges `json:"edges"`
	session_segments *string
}

// SegmentEdges holds the relations/edges for other nodes in the graph.
type SegmentEdges struct {
	// WordAlignments holds the value of the wordAlignments edge.
	WordAlignments []*WordAlignment `json:"wordAlignments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WordAlignmentsOrErr returns the WordAlignments value or an error if the edge
// was not loaded in eager-loading.
func (e SegmentEdges) WordAlignmentsOrErr() ([]*WordAlignment, error) {
	if e.loadedTypes[0] {
		return e.WordAlignments, nil
	}
	return nil, &NotLoadedError{edge: "wordAlignments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Segment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case segment.FieldStart, segment.FieldLength:
			values[i] = new(sql.NullFloat64)
		case segment.FieldID, segment.FieldType:
			values[i] = new(sql.NullString)
		case segment.ForeignKeys[0]: // session_segments
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Segment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Segment fields.
func (s *Segment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case segment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case segment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = segment.Type(value.String)
			}
		case segment.FieldStart:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				s.Start = value.Float64
			}
		case segment.FieldLength:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				s.Length = value.Float64
			}
		case segment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_segments", values[i])
			} else if value.Valid {
				s.session_segments = new(string)
				*s.session_segments = value.String
			}
		}
	}
	return nil
}

// QueryWordAlignments queries the "wordAlignments" edge of the Segment entity.
func (s *Segment) QueryWordAlignments() *WordAlignmentQuery {
	return (&SegmentClient{config: s.config}).QueryWordAlignments(s)
}

// Update returns a builder for updating this Segment.
// Note that you need to call Segment.Unwrap() before calling this method if this Segment
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Segment) Update() *SegmentUpdateOne {
	return (&SegmentClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Segment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Segment) Unwrap() *Segment {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Segment is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Segment) String() string {
	var builder strings.Builder
	builder.WriteString("Segment(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", start=")
	builder.WriteString(fmt.Sprintf("%v", s.Start))
	builder.WriteString(", length=")
	builder.WriteString(fmt.Sprintf("%v", s.Length))
	builder.WriteByte(')')
	return builder.String()
}

// Segments is a parsable slice of Segment.
type Segments []*Segment

func (s Segments) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
