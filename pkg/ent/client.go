// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"asr-demo-recognize/pkg/ent/migrate"

	"asr-demo-recognize/pkg/ent/candidate"
	"asr-demo-recognize/pkg/ent/segment"
	"asr-demo-recognize/pkg/ent/session"
	"asr-demo-recognize/pkg/ent/wordalignment"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Candidate is the client for interacting with the Candidate builders.
	Candidate *CandidateClient
	// Segment is the client for interacting with the Segment builders.
	Segment *SegmentClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// WordAlignment is the client for interacting with the WordAlignment builders.
	WordAlignment *WordAlignmentClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Candidate = NewCandidateClient(c.config)
	c.Segment = NewSegmentClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.WordAlignment = NewWordAlignmentClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Candidate:     NewCandidateClient(cfg),
		Segment:       NewSegmentClient(cfg),
		Session:       NewSessionClient(cfg),
		WordAlignment: NewWordAlignmentClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:        cfg,
		Candidate:     NewCandidateClient(cfg),
		Segment:       NewSegmentClient(cfg),
		Session:       NewSessionClient(cfg),
		WordAlignment: NewWordAlignmentClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Candidate.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Candidate.Use(hooks...)
	c.Segment.Use(hooks...)
	c.Session.Use(hooks...)
	c.WordAlignment.Use(hooks...)
}

// CandidateClient is a client for the Candidate schema.
type CandidateClient struct {
	config
}

// NewCandidateClient returns a client for the Candidate from the given config.
func NewCandidateClient(c config) *CandidateClient {
	return &CandidateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `candidate.Hooks(f(g(h())))`.
func (c *CandidateClient) Use(hooks ...Hook) {
	c.hooks.Candidate = append(c.hooks.Candidate, hooks...)
}

// Create returns a create builder for Candidate.
func (c *CandidateClient) Create() *CandidateCreate {
	mutation := newCandidateMutation(c.config, OpCreate)
	return &CandidateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Candidate entities.
func (c *CandidateClient) CreateBulk(builders ...*CandidateCreate) *CandidateCreateBulk {
	return &CandidateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Candidate.
func (c *CandidateClient) Update() *CandidateUpdate {
	mutation := newCandidateMutation(c.config, OpUpdate)
	return &CandidateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CandidateClient) UpdateOne(ca *Candidate) *CandidateUpdateOne {
	mutation := newCandidateMutation(c.config, OpUpdateOne, withCandidate(ca))
	return &CandidateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CandidateClient) UpdateOneID(id int) *CandidateUpdateOne {
	mutation := newCandidateMutation(c.config, OpUpdateOne, withCandidateID(id))
	return &CandidateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Candidate.
func (c *CandidateClient) Delete() *CandidateDelete {
	mutation := newCandidateMutation(c.config, OpDelete)
	return &CandidateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CandidateClient) DeleteOne(ca *Candidate) *CandidateDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CandidateClient) DeleteOneID(id int) *CandidateDeleteOne {
	builder := c.Delete().Where(candidate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CandidateDeleteOne{builder}
}

// Query returns a query builder for Candidate.
func (c *CandidateClient) Query() *CandidateQuery {
	return &CandidateQuery{
		config: c.config,
	}
}

// Get returns a Candidate entity by its id.
func (c *CandidateClient) Get(ctx context.Context, id int) (*Candidate, error) {
	return c.Query().Where(candidate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CandidateClient) GetX(ctx context.Context, id int) *Candidate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CandidateClient) Hooks() []Hook {
	return c.hooks.Candidate
}

// SegmentClient is a client for the Segment schema.
type SegmentClient struct {
	config
}

// NewSegmentClient returns a client for the Segment from the given config.
func NewSegmentClient(c config) *SegmentClient {
	return &SegmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `segment.Hooks(f(g(h())))`.
func (c *SegmentClient) Use(hooks ...Hook) {
	c.hooks.Segment = append(c.hooks.Segment, hooks...)
}

// Create returns a create builder for Segment.
func (c *SegmentClient) Create() *SegmentCreate {
	mutation := newSegmentMutation(c.config, OpCreate)
	return &SegmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Segment entities.
func (c *SegmentClient) CreateBulk(builders ...*SegmentCreate) *SegmentCreateBulk {
	return &SegmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Segment.
func (c *SegmentClient) Update() *SegmentUpdate {
	mutation := newSegmentMutation(c.config, OpUpdate)
	return &SegmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SegmentClient) UpdateOne(s *Segment) *SegmentUpdateOne {
	mutation := newSegmentMutation(c.config, OpUpdateOne, withSegment(s))
	return &SegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SegmentClient) UpdateOneID(id string) *SegmentUpdateOne {
	mutation := newSegmentMutation(c.config, OpUpdateOne, withSegmentID(id))
	return &SegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Segment.
func (c *SegmentClient) Delete() *SegmentDelete {
	mutation := newSegmentMutation(c.config, OpDelete)
	return &SegmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SegmentClient) DeleteOne(s *Segment) *SegmentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SegmentClient) DeleteOneID(id string) *SegmentDeleteOne {
	builder := c.Delete().Where(segment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SegmentDeleteOne{builder}
}

// Query returns a query builder for Segment.
func (c *SegmentClient) Query() *SegmentQuery {
	return &SegmentQuery{
		config: c.config,
	}
}

// Get returns a Segment entity by its id.
func (c *SegmentClient) Get(ctx context.Context, id string) (*Segment, error) {
	return c.Query().Where(segment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SegmentClient) GetX(ctx context.Context, id string) *Segment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWordAlignments queries the wordAlignments edge of a Segment.
func (c *SegmentClient) QueryWordAlignments(s *Segment) *WordAlignmentQuery {
	query := &WordAlignmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(segment.Table, segment.FieldID, id),
			sqlgraph.To(wordalignment.Table, wordalignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, segment.WordAlignmentsTable, segment.WordAlignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SegmentClient) Hooks() []Hook {
	return c.hooks.Segment
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a create builder for Session.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id string) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SessionClient) DeleteOneID(id string) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id string) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id string) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySegments queries the segments edge of a Session.
func (c *SessionClient) QuerySegments(s *Session) *SegmentQuery {
	query := &SegmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(segment.Table, segment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.SegmentsTable, session.SegmentsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// WordAlignmentClient is a client for the WordAlignment schema.
type WordAlignmentClient struct {
	config
}

// NewWordAlignmentClient returns a client for the WordAlignment from the given config.
func NewWordAlignmentClient(c config) *WordAlignmentClient {
	return &WordAlignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wordalignment.Hooks(f(g(h())))`.
func (c *WordAlignmentClient) Use(hooks ...Hook) {
	c.hooks.WordAlignment = append(c.hooks.WordAlignment, hooks...)
}

// Create returns a create builder for WordAlignment.
func (c *WordAlignmentClient) Create() *WordAlignmentCreate {
	mutation := newWordAlignmentMutation(c.config, OpCreate)
	return &WordAlignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WordAlignment entities.
func (c *WordAlignmentClient) CreateBulk(builders ...*WordAlignmentCreate) *WordAlignmentCreateBulk {
	return &WordAlignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WordAlignment.
func (c *WordAlignmentClient) Update() *WordAlignmentUpdate {
	mutation := newWordAlignmentMutation(c.config, OpUpdate)
	return &WordAlignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WordAlignmentClient) UpdateOne(wa *WordAlignment) *WordAlignmentUpdateOne {
	mutation := newWordAlignmentMutation(c.config, OpUpdateOne, withWordAlignment(wa))
	return &WordAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WordAlignmentClient) UpdateOneID(id int) *WordAlignmentUpdateOne {
	mutation := newWordAlignmentMutation(c.config, OpUpdateOne, withWordAlignmentID(id))
	return &WordAlignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WordAlignment.
func (c *WordAlignmentClient) Delete() *WordAlignmentDelete {
	mutation := newWordAlignmentMutation(c.config, OpDelete)
	return &WordAlignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WordAlignmentClient) DeleteOne(wa *WordAlignment) *WordAlignmentDeleteOne {
	return c.DeleteOneID(wa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WordAlignmentClient) DeleteOneID(id int) *WordAlignmentDeleteOne {
	builder := c.Delete().Where(wordalignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WordAlignmentDeleteOne{builder}
}

// Query returns a query builder for WordAlignment.
func (c *WordAlignmentClient) Query() *WordAlignmentQuery {
	return &WordAlignmentQuery{
		config: c.config,
	}
}

// Get returns a WordAlignment entity by its id.
func (c *WordAlignmentClient) Get(ctx context.Context, id int) (*WordAlignment, error) {
	return c.Query().Where(wordalignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WordAlignmentClient) GetX(ctx context.Context, id int) *WordAlignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCandidates queries the candidates edge of a WordAlignment.
func (c *WordAlignmentClient) QueryCandidates(wa *WordAlignment) *CandidateQuery {
	query := &CandidateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wordalignment.Table, wordalignment.FieldID, id),
			sqlgraph.To(candidate.Table, candidate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, wordalignment.CandidatesTable, wordalignment.CandidatesColumn),
		)
		fromV = sqlgraph.Neighbors(wa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WordAlignmentClient) Hooks() []Hook {
	return c.hooks.WordAlignment
}
