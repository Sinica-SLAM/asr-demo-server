// Code generated by entc, DO NOT EDIT.

package ent

import (
	"asr-demo-recognize/pkg/ent/predicate"
	"asr-demo-recognize/pkg/ent/segment"
	"asr-demo-recognize/pkg/ent/wordalignment"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SegmentUpdate is the builder for updating Segment entities.
type SegmentUpdate struct {
	config
	hooks    []Hook
	mutation *SegmentMutation
}

// Where appends a list predicates to the SegmentUpdate builder.
func (su *SegmentUpdate) Where(ps ...predicate.Segment) *SegmentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetType sets the "type" field.
func (su *SegmentUpdate) SetType(s segment.Type) *SegmentUpdate {
	su.mutation.SetType(s)
	return su
}

// SetStart sets the "start" field.
func (su *SegmentUpdate) SetStart(f float64) *SegmentUpdate {
	su.mutation.ResetStart()
	su.mutation.SetStart(f)
	return su
}

// AddStart adds f to the "start" field.
func (su *SegmentUpdate) AddStart(f float64) *SegmentUpdate {
	su.mutation.AddStart(f)
	return su
}

// SetLength sets the "length" field.
func (su *SegmentUpdate) SetLength(f float64) *SegmentUpdate {
	su.mutation.ResetLength()
	su.mutation.SetLength(f)
	return su
}

// AddLength adds f to the "length" field.
func (su *SegmentUpdate) AddLength(f float64) *SegmentUpdate {
	su.mutation.AddLength(f)
	return su
}

// AddWordAlignmentIDs adds the "wordAlignments" edge to the WordAlignment entity by IDs.
func (su *SegmentUpdate) AddWordAlignmentIDs(ids ...int) *SegmentUpdate {
	su.mutation.AddWordAlignmentIDs(ids...)
	return su
}

// AddWordAlignments adds the "wordAlignments" edges to the WordAlignment entity.
func (su *SegmentUpdate) AddWordAlignments(w ...*WordAlignment) *SegmentUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.AddWordAlignmentIDs(ids...)
}

// Mutation returns the SegmentMutation object of the builder.
func (su *SegmentUpdate) Mutation() *SegmentMutation {
	return su.mutation
}

// ClearWordAlignments clears all "wordAlignments" edges to the WordAlignment entity.
func (su *SegmentUpdate) ClearWordAlignments() *SegmentUpdate {
	su.mutation.ClearWordAlignments()
	return su
}

// RemoveWordAlignmentIDs removes the "wordAlignments" edge to WordAlignment entities by IDs.
func (su *SegmentUpdate) RemoveWordAlignmentIDs(ids ...int) *SegmentUpdate {
	su.mutation.RemoveWordAlignmentIDs(ids...)
	return su
}

// RemoveWordAlignments removes "wordAlignments" edges to WordAlignment entities.
func (su *SegmentUpdate) RemoveWordAlignments(w ...*WordAlignment) *SegmentUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.RemoveWordAlignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SegmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SegmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SegmentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SegmentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SegmentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SegmentUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := segment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := su.mutation.Start(); ok {
		if err := segment.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf("ent: validator failed for field \"start\": %w", err)}
		}
	}
	if v, ok := su.mutation.Length(); ok {
		if err := segment.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf("ent: validator failed for field \"length\": %w", err)}
		}
	}
	return nil
}

func (su *SegmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   segment.Table,
			Columns: segment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: segment.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: segment.FieldType,
		})
	}
	if value, ok := su.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldStart,
		})
	}
	if value, ok := su.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldStart,
		})
	}
	if value, ok := su.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldLength,
		})
	}
	if value, ok := su.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldLength,
		})
	}
	if su.mutation.WordAlignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   segment.WordAlignmentsTable,
			Columns: []string{segment.WordAlignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wordalignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedWordAlignmentsIDs(); len(nodes) > 0 && !su.mutation.WordAlignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   segment.WordAlignmentsTable,
			Columns: []string{segment.WordAlignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wordalignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WordAlignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   segment.WordAlignmentsTable,
			Columns: []string{segment.WordAlignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wordalignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{segment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SegmentUpdateOne is the builder for updating a single Segment entity.
type SegmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SegmentMutation
}

// SetType sets the "type" field.
func (suo *SegmentUpdateOne) SetType(s segment.Type) *SegmentUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetStart sets the "start" field.
func (suo *SegmentUpdateOne) SetStart(f float64) *SegmentUpdateOne {
	suo.mutation.ResetStart()
	suo.mutation.SetStart(f)
	return suo
}

// AddStart adds f to the "start" field.
func (suo *SegmentUpdateOne) AddStart(f float64) *SegmentUpdateOne {
	suo.mutation.AddStart(f)
	return suo
}

// SetLength sets the "length" field.
func (suo *SegmentUpdateOne) SetLength(f float64) *SegmentUpdateOne {
	suo.mutation.ResetLength()
	suo.mutation.SetLength(f)
	return suo
}

// AddLength adds f to the "length" field.
func (suo *SegmentUpdateOne) AddLength(f float64) *SegmentUpdateOne {
	suo.mutation.AddLength(f)
	return suo
}

// AddWordAlignmentIDs adds the "wordAlignments" edge to the WordAlignment entity by IDs.
func (suo *SegmentUpdateOne) AddWordAlignmentIDs(ids ...int) *SegmentUpdateOne {
	suo.mutation.AddWordAlignmentIDs(ids...)
	return suo
}

// AddWordAlignments adds the "wordAlignments" edges to the WordAlignment entity.
func (suo *SegmentUpdateOne) AddWordAlignments(w ...*WordAlignment) *SegmentUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.AddWordAlignmentIDs(ids...)
}

// Mutation returns the SegmentMutation object of the builder.
func (suo *SegmentUpdateOne) Mutation() *SegmentMutation {
	return suo.mutation
}

// ClearWordAlignments clears all "wordAlignments" edges to the WordAlignment entity.
func (suo *SegmentUpdateOne) ClearWordAlignments() *SegmentUpdateOne {
	suo.mutation.ClearWordAlignments()
	return suo
}

// RemoveWordAlignmentIDs removes the "wordAlignments" edge to WordAlignment entities by IDs.
func (suo *SegmentUpdateOne) RemoveWordAlignmentIDs(ids ...int) *SegmentUpdateOne {
	suo.mutation.RemoveWordAlignmentIDs(ids...)
	return suo
}

// RemoveWordAlignments removes "wordAlignments" edges to WordAlignment entities.
func (suo *SegmentUpdateOne) RemoveWordAlignments(w ...*WordAlignment) *SegmentUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.RemoveWordAlignmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SegmentUpdateOne) Select(field string, fields ...string) *SegmentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Segment entity.
func (suo *SegmentUpdateOne) Save(ctx context.Context) (*Segment, error) {
	var (
		err  error
		node *Segment
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SegmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SegmentUpdateOne) SaveX(ctx context.Context) *Segment {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SegmentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SegmentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SegmentUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := segment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Start(); ok {
		if err := segment.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf("ent: validator failed for field \"start\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Length(); ok {
		if err := segment.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf("ent: validator failed for field \"length\": %w", err)}
		}
	}
	return nil
}

func (suo *SegmentUpdateOne) sqlSave(ctx context.Context) (_node *Segment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   segment.Table,
			Columns: segment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: segment.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Segment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, segment.FieldID)
		for _, f := range fields {
			if !segment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != segment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: segment.FieldType,
		})
	}
	if value, ok := suo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldStart,
		})
	}
	if value, ok := suo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldStart,
		})
	}
	if value, ok := suo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldLength,
		})
	}
	if value, ok := suo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: segment.FieldLength,
		})
	}
	if suo.mutation.WordAlignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   segment.WordAlignmentsTable,
			Columns: []string{segment.WordAlignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wordalignment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedWordAlignmentsIDs(); len(nodes) > 0 && !suo.mutation.WordAlignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   segment.WordAlignmentsTable,
			Columns: []string{segment.WordAlignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wordalignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WordAlignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   segment.WordAlignmentsTable,
			Columns: []string{segment.WordAlignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: wordalignment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Segment{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{segment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
