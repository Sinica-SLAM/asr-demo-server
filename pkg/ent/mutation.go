// Code generated by entc, DO NOT EDIT.

package ent

import (
	"asr-demo-recognize/pkg/ent/candidate"
	"asr-demo-recognize/pkg/ent/predicate"
	"asr-demo-recognize/pkg/ent/segment"
	"asr-demo-recognize/pkg/ent/session"
	"asr-demo-recognize/pkg/ent/wordalignment"
	"context"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCandidate     = "Candidate"
	TypeSegment       = "Segment"
	TypeSession       = "Session"
	TypeWordAlignment = "WordAlignment"
)

// CandidateMutation represents an operation that mutates the Candidate nodes in the graph.
type CandidateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	confidence    *float64
	addconfidence *float64
	word          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Candidate, error)
	predicates    []predicate.Candidate
}

var _ ent.Mutation = (*CandidateMutation)(nil)

// candidateOption allows management of the mutation configuration using functional options.
type candidateOption func(*CandidateMutation)

// newCandidateMutation creates new mutation for the Candidate entity.
func newCandidateMutation(c config, op Op, opts ...candidateOption) *CandidateMutation {
	m := &CandidateMutation{
		config:        c,
		op:            op,
		typ:           TypeCandidate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCandidateID sets the ID field of the mutation.
func withCandidateID(id int) candidateOption {
	return func(m *CandidateMutation) {
		var (
			err   error
			once  sync.Once
			value *Candidate
		)
		m.oldValue = func(ctx context.Context) (*Candidate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Candidate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCandidate sets the old Candidate of the mutation.
func withCandidate(node *Candidate) candidateOption {
	return func(m *CandidateMutation) {
		m.oldValue = func(context.Context) (*Candidate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CandidateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CandidateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CandidateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetConfidence sets the "confidence" field.
func (m *CandidateMutation) SetConfidence(f float64) {
	m.confidence = &f
	m.addconfidence = nil
}

// Confidence returns the value of the "confidence" field in the mutation.
func (m *CandidateMutation) Confidence() (r float64, exists bool) {
	v := m.confidence
	if v == nil {
		return
	}
	return *v, true
}

// OldConfidence returns the old "confidence" field's value of the Candidate entity.
// If the Candidate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CandidateMutation) OldConfidence(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfidence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfidence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfidence: %w", err)
	}
	return oldValue.Confidence, nil
}

// AddConfidence adds f to the "confidence" field.
func (m *CandidateMutation) AddConfidence(f float64) {
	if m.addconfidence != nil {
		*m.addconfidence += f
	} else {
		m.addconfidence = &f
	}
}

// AddedConfidence returns the value that was added to the "confidence" field in this mutation.
func (m *CandidateMutation) AddedConfidence() (r float64, exists bool) {
	v := m.addconfidence
	if v == nil {
		return
	}
	return *v, true
}

// ResetConfidence resets all changes to the "confidence" field.
func (m *CandidateMutation) ResetConfidence() {
	m.confidence = nil
	m.addconfidence = nil
}

// SetWord sets the "word" field.
func (m *CandidateMutation) SetWord(s string) {
	m.word = &s
}

// Word returns the value of the "word" field in the mutation.
func (m *CandidateMutation) Word() (r string, exists bool) {
	v := m.word
	if v == nil {
		return
	}
	return *v, true
}

// OldWord returns the old "word" field's value of the Candidate entity.
// If the Candidate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CandidateMutation) OldWord(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWord is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWord requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord: %w", err)
	}
	return oldValue.Word, nil
}

// ResetWord resets all changes to the "word" field.
func (m *CandidateMutation) ResetWord() {
	m.word = nil
}

// Where appends a list predicates to the CandidateMutation builder.
func (m *CandidateMutation) Where(ps ...predicate.Candidate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CandidateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Candidate).
func (m *CandidateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CandidateMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.confidence != nil {
		fields = append(fields, candidate.FieldConfidence)
	}
	if m.word != nil {
		fields = append(fields, candidate.FieldWord)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CandidateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case candidate.FieldConfidence:
		return m.Confidence()
	case candidate.FieldWord:
		return m.Word()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CandidateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case candidate.FieldConfidence:
		return m.OldConfidence(ctx)
	case candidate.FieldWord:
		return m.OldWord(ctx)
	}
	return nil, fmt.Errorf("unknown Candidate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CandidateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case candidate.FieldConfidence:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfidence(v)
		return nil
	case candidate.FieldWord:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord(v)
		return nil
	}
	return fmt.Errorf("unknown Candidate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CandidateMutation) AddedFields() []string {
	var fields []string
	if m.addconfidence != nil {
		fields = append(fields, candidate.FieldConfidence)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CandidateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case candidate.FieldConfidence:
		return m.AddedConfidence()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CandidateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case candidate.FieldConfidence:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConfidence(v)
		return nil
	}
	return fmt.Errorf("unknown Candidate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CandidateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CandidateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CandidateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Candidate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CandidateMutation) ResetField(name string) error {
	switch name {
	case candidate.FieldConfidence:
		m.ResetConfidence()
		return nil
	case candidate.FieldWord:
		m.ResetWord()
		return nil
	}
	return fmt.Errorf("unknown Candidate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CandidateMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CandidateMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CandidateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CandidateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CandidateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CandidateMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CandidateMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Candidate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CandidateMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Candidate edge %s", name)
}

// SegmentMutation represents an operation that mutates the Segment nodes in the graph.
type SegmentMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	_type                 *segment.Type
	start                 *float64
	addstart              *float64
	length                *float64
	addlength             *float64
	clearedFields         map[string]struct{}
	wordAlignments        map[int]struct{}
	removedwordAlignments map[int]struct{}
	clearedwordAlignments bool
	done                  bool
	oldValue              func(context.Context) (*Segment, error)
	predicates            []predicate.Segment
}

var _ ent.Mutation = (*SegmentMutation)(nil)

// segmentOption allows management of the mutation configuration using functional options.
type segmentOption func(*SegmentMutation)

// newSegmentMutation creates new mutation for the Segment entity.
func newSegmentMutation(c config, op Op, opts ...segmentOption) *SegmentMutation {
	m := &SegmentMutation{
		config:        c,
		op:            op,
		typ:           TypeSegment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSegmentID sets the ID field of the mutation.
func withSegmentID(id string) segmentOption {
	return func(m *SegmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Segment
		)
		m.oldValue = func(ctx context.Context) (*Segment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Segment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSegment sets the old Segment of the mutation.
func withSegment(node *Segment) segmentOption {
	return func(m *SegmentMutation) {
		m.oldValue = func(context.Context) (*Segment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SegmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SegmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Segment entities.
func (m *SegmentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SegmentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *SegmentMutation) SetType(s segment.Type) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *SegmentMutation) GetType() (r segment.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Segment entity.
// If the Segment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SegmentMutation) OldType(ctx context.Context) (v segment.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *SegmentMutation) ResetType() {
	m._type = nil
}

// SetStart sets the "start" field.
func (m *SegmentMutation) SetStart(f float64) {
	m.start = &f
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *SegmentMutation) Start() (r float64, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the Segment entity.
// If the Segment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SegmentMutation) OldStart(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds f to the "start" field.
func (m *SegmentMutation) AddStart(f float64) {
	if m.addstart != nil {
		*m.addstart += f
	} else {
		m.addstart = &f
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *SegmentMutation) AddedStart() (r float64, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *SegmentMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetLength sets the "length" field.
func (m *SegmentMutation) SetLength(f float64) {
	m.length = &f
	m.addlength = nil
}

// Length returns the value of the "length" field in the mutation.
func (m *SegmentMutation) Length() (r float64, exists bool) {
	v := m.length
	if v == nil {
		return
	}
	return *v, true
}

// OldLength returns the old "length" field's value of the Segment entity.
// If the Segment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SegmentMutation) OldLength(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLength: %w", err)
	}
	return oldValue.Length, nil
}

// AddLength adds f to the "length" field.
func (m *SegmentMutation) AddLength(f float64) {
	if m.addlength != nil {
		*m.addlength += f
	} else {
		m.addlength = &f
	}
}

// AddedLength returns the value that was added to the "length" field in this mutation.
func (m *SegmentMutation) AddedLength() (r float64, exists bool) {
	v := m.addlength
	if v == nil {
		return
	}
	return *v, true
}

// ResetLength resets all changes to the "length" field.
func (m *SegmentMutation) ResetLength() {
	m.length = nil
	m.addlength = nil
}

// AddWordAlignmentIDs adds the "wordAlignments" edge to the WordAlignment entity by ids.
func (m *SegmentMutation) AddWordAlignmentIDs(ids ...int) {
	if m.wordAlignments == nil {
		m.wordAlignments = make(map[int]struct{})
	}
	for i := range ids {
		m.wordAlignments[ids[i]] = struct{}{}
	}
}

// ClearWordAlignments clears the "wordAlignments" edge to the WordAlignment entity.
func (m *SegmentMutation) ClearWordAlignments() {
	m.clearedwordAlignments = true
}

// WordAlignmentsCleared reports if the "wordAlignments" edge to the WordAlignment entity was cleared.
func (m *SegmentMutation) WordAlignmentsCleared() bool {
	return m.clearedwordAlignments
}

// RemoveWordAlignmentIDs removes the "wordAlignments" edge to the WordAlignment entity by IDs.
func (m *SegmentMutation) RemoveWordAlignmentIDs(ids ...int) {
	if m.removedwordAlignments == nil {
		m.removedwordAlignments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.wordAlignments, ids[i])
		m.removedwordAlignments[ids[i]] = struct{}{}
	}
}

// RemovedWordAlignments returns the removed IDs of the "wordAlignments" edge to the WordAlignment entity.
func (m *SegmentMutation) RemovedWordAlignmentsIDs() (ids []int) {
	for id := range m.removedwordAlignments {
		ids = append(ids, id)
	}
	return
}

// WordAlignmentsIDs returns the "wordAlignments" edge IDs in the mutation.
func (m *SegmentMutation) WordAlignmentsIDs() (ids []int) {
	for id := range m.wordAlignments {
		ids = append(ids, id)
	}
	return
}

// ResetWordAlignments resets all changes to the "wordAlignments" edge.
func (m *SegmentMutation) ResetWordAlignments() {
	m.wordAlignments = nil
	m.clearedwordAlignments = false
	m.removedwordAlignments = nil
}

// Where appends a list predicates to the SegmentMutation builder.
func (m *SegmentMutation) Where(ps ...predicate.Segment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SegmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Segment).
func (m *SegmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SegmentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, segment.FieldType)
	}
	if m.start != nil {
		fields = append(fields, segment.FieldStart)
	}
	if m.length != nil {
		fields = append(fields, segment.FieldLength)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SegmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case segment.FieldType:
		return m.GetType()
	case segment.FieldStart:
		return m.Start()
	case segment.FieldLength:
		return m.Length()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SegmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case segment.FieldType:
		return m.OldType(ctx)
	case segment.FieldStart:
		return m.OldStart(ctx)
	case segment.FieldLength:
		return m.OldLength(ctx)
	}
	return nil, fmt.Errorf("unknown Segment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SegmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case segment.FieldType:
		v, ok := value.(segment.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case segment.FieldStart:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case segment.FieldLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLength(v)
		return nil
	}
	return fmt.Errorf("unknown Segment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SegmentMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, segment.FieldStart)
	}
	if m.addlength != nil {
		fields = append(fields, segment.FieldLength)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SegmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case segment.FieldStart:
		return m.AddedStart()
	case segment.FieldLength:
		return m.AddedLength()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SegmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case segment.FieldStart:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case segment.FieldLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLength(v)
		return nil
	}
	return fmt.Errorf("unknown Segment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SegmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SegmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SegmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Segment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SegmentMutation) ResetField(name string) error {
	switch name {
	case segment.FieldType:
		m.ResetType()
		return nil
	case segment.FieldStart:
		m.ResetStart()
		return nil
	case segment.FieldLength:
		m.ResetLength()
		return nil
	}
	return fmt.Errorf("unknown Segment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SegmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.wordAlignments != nil {
		edges = append(edges, segment.EdgeWordAlignments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SegmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case segment.EdgeWordAlignments:
		ids := make([]ent.Value, 0, len(m.wordAlignments))
		for id := range m.wordAlignments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SegmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedwordAlignments != nil {
		edges = append(edges, segment.EdgeWordAlignments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SegmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case segment.EdgeWordAlignments:
		ids := make([]ent.Value, 0, len(m.removedwordAlignments))
		for id := range m.removedwordAlignments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SegmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedwordAlignments {
		edges = append(edges, segment.EdgeWordAlignments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SegmentMutation) EdgeCleared(name string) bool {
	switch name {
	case segment.EdgeWordAlignments:
		return m.clearedwordAlignments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SegmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Segment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SegmentMutation) ResetEdge(name string) error {
	switch name {
	case segment.EdgeWordAlignments:
		m.ResetWordAlignments()
		return nil
	}
	return fmt.Errorf("unknown Segment edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op              Op
	typ             string
	id              *string
	audio           *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	segments        map[string]struct{}
	removedsegments map[string]struct{}
	clearedsegments bool
	done            bool
	oldValue        func(context.Context) (*Session, error)
	predicates      []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id string) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAudio sets the "audio" field.
func (m *SessionMutation) SetAudio(s string) {
	m.audio = &s
}

// Audio returns the value of the "audio" field in the mutation.
func (m *SessionMutation) Audio() (r string, exists bool) {
	v := m.audio
	if v == nil {
		return
	}
	return *v, true
}

// OldAudio returns the old "audio" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldAudio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAudio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAudio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAudio: %w", err)
	}
	return oldValue.Audio, nil
}

// ResetAudio resets all changes to the "audio" field.
func (m *SessionMutation) ResetAudio() {
	m.audio = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSegmentIDs adds the "segments" edge to the Segment entity by ids.
func (m *SessionMutation) AddSegmentIDs(ids ...string) {
	if m.segments == nil {
		m.segments = make(map[string]struct{})
	}
	for i := range ids {
		m.segments[ids[i]] = struct{}{}
	}
}

// ClearSegments clears the "segments" edge to the Segment entity.
func (m *SessionMutation) ClearSegments() {
	m.clearedsegments = true
}

// SegmentsCleared reports if the "segments" edge to the Segment entity was cleared.
func (m *SessionMutation) SegmentsCleared() bool {
	return m.clearedsegments
}

// RemoveSegmentIDs removes the "segments" edge to the Segment entity by IDs.
func (m *SessionMutation) RemoveSegmentIDs(ids ...string) {
	if m.removedsegments == nil {
		m.removedsegments = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.segments, ids[i])
		m.removedsegments[ids[i]] = struct{}{}
	}
}

// RemovedSegments returns the removed IDs of the "segments" edge to the Segment entity.
func (m *SessionMutation) RemovedSegmentsIDs() (ids []string) {
	for id := range m.removedsegments {
		ids = append(ids, id)
	}
	return
}

// SegmentsIDs returns the "segments" edge IDs in the mutation.
func (m *SessionMutation) SegmentsIDs() (ids []string) {
	for id := range m.segments {
		ids = append(ids, id)
	}
	return
}

// ResetSegments resets all changes to the "segments" edge.
func (m *SessionMutation) ResetSegments() {
	m.segments = nil
	m.clearedsegments = false
	m.removedsegments = nil
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.audio != nil {
		fields = append(fields, session.FieldAudio)
	}
	if m.created_at != nil {
		fields = append(fields, session.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, session.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldAudio:
		return m.Audio()
	case session.FieldCreatedAt:
		return m.CreatedAt()
	case session.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldAudio:
		return m.OldAudio(ctx)
	case session.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case session.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldAudio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAudio(v)
		return nil
	case session.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case session.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldAudio:
		m.ResetAudio()
		return nil
	case session.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case session.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.segments != nil {
		edges = append(edges, session.EdgeSegments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeSegments:
		ids := make([]ent.Value, 0, len(m.segments))
		for id := range m.segments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsegments != nil {
		edges = append(edges, session.EdgeSegments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeSegments:
		ids := make([]ent.Value, 0, len(m.removedsegments))
		for id := range m.removedsegments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsegments {
		edges = append(edges, session.EdgeSegments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeSegments:
		return m.clearedsegments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeSegments:
		m.ResetSegments()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// WordAlignmentMutation represents an operation that mutates the WordAlignment nodes in the graph.
type WordAlignmentMutation struct {
	config
	op                Op
	typ               string
	id                *int
	start             *float64
	addstart          *float64
	length            *float64
	addlength         *float64
	word              *string
	token             *string
	confidence        *float64
	addconfidence     *float64
	clearedFields     map[string]struct{}
	candidates        map[int]struct{}
	removedcandidates map[int]struct{}
	clearedcandidates bool
	done              bool
	oldValue          func(context.Context) (*WordAlignment, error)
	predicates        []predicate.WordAlignment
}

var _ ent.Mutation = (*WordAlignmentMutation)(nil)

// wordalignmentOption allows management of the mutation configuration using functional options.
type wordalignmentOption func(*WordAlignmentMutation)

// newWordAlignmentMutation creates new mutation for the WordAlignment entity.
func newWordAlignmentMutation(c config, op Op, opts ...wordalignmentOption) *WordAlignmentMutation {
	m := &WordAlignmentMutation{
		config:        c,
		op:            op,
		typ:           TypeWordAlignment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWordAlignmentID sets the ID field of the mutation.
func withWordAlignmentID(id int) wordalignmentOption {
	return func(m *WordAlignmentMutation) {
		var (
			err   error
			once  sync.Once
			value *WordAlignment
		)
		m.oldValue = func(ctx context.Context) (*WordAlignment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WordAlignment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWordAlignment sets the old WordAlignment of the mutation.
func withWordAlignment(node *WordAlignment) wordalignmentOption {
	return func(m *WordAlignmentMutation) {
		m.oldValue = func(context.Context) (*WordAlignment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WordAlignmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WordAlignmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WordAlignmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStart sets the "start" field.
func (m *WordAlignmentMutation) SetStart(f float64) {
	m.start = &f
	m.addstart = nil
}

// Start returns the value of the "start" field in the mutation.
func (m *WordAlignmentMutation) Start() (r float64, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the WordAlignment entity.
// If the WordAlignment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WordAlignmentMutation) OldStart(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// AddStart adds f to the "start" field.
func (m *WordAlignmentMutation) AddStart(f float64) {
	if m.addstart != nil {
		*m.addstart += f
	} else {
		m.addstart = &f
	}
}

// AddedStart returns the value that was added to the "start" field in this mutation.
func (m *WordAlignmentMutation) AddedStart() (r float64, exists bool) {
	v := m.addstart
	if v == nil {
		return
	}
	return *v, true
}

// ResetStart resets all changes to the "start" field.
func (m *WordAlignmentMutation) ResetStart() {
	m.start = nil
	m.addstart = nil
}

// SetLength sets the "length" field.
func (m *WordAlignmentMutation) SetLength(f float64) {
	m.length = &f
	m.addlength = nil
}

// Length returns the value of the "length" field in the mutation.
func (m *WordAlignmentMutation) Length() (r float64, exists bool) {
	v := m.length
	if v == nil {
		return
	}
	return *v, true
}

// OldLength returns the old "length" field's value of the WordAlignment entity.
// If the WordAlignment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WordAlignmentMutation) OldLength(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLength: %w", err)
	}
	return oldValue.Length, nil
}

// AddLength adds f to the "length" field.
func (m *WordAlignmentMutation) AddLength(f float64) {
	if m.addlength != nil {
		*m.addlength += f
	} else {
		m.addlength = &f
	}
}

// AddedLength returns the value that was added to the "length" field in this mutation.
func (m *WordAlignmentMutation) AddedLength() (r float64, exists bool) {
	v := m.addlength
	if v == nil {
		return
	}
	return *v, true
}

// ResetLength resets all changes to the "length" field.
func (m *WordAlignmentMutation) ResetLength() {
	m.length = nil
	m.addlength = nil
}

// SetWord sets the "word" field.
func (m *WordAlignmentMutation) SetWord(s string) {
	m.word = &s
}

// Word returns the value of the "word" field in the mutation.
func (m *WordAlignmentMutation) Word() (r string, exists bool) {
	v := m.word
	if v == nil {
		return
	}
	return *v, true
}

// OldWord returns the old "word" field's value of the WordAlignment entity.
// If the WordAlignment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WordAlignmentMutation) OldWord(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWord is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWord requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWord: %w", err)
	}
	return oldValue.Word, nil
}

// ResetWord resets all changes to the "word" field.
func (m *WordAlignmentMutation) ResetWord() {
	m.word = nil
}

// SetToken sets the "token" field.
func (m *WordAlignmentMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *WordAlignmentMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the WordAlignment entity.
// If the WordAlignment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WordAlignmentMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *WordAlignmentMutation) ResetToken() {
	m.token = nil
}

// SetConfidence sets the "confidence" field.
func (m *WordAlignmentMutation) SetConfidence(f float64) {
	m.confidence = &f
	m.addconfidence = nil
}

// Confidence returns the value of the "confidence" field in the mutation.
func (m *WordAlignmentMutation) Confidence() (r float64, exists bool) {
	v := m.confidence
	if v == nil {
		return
	}
	return *v, true
}

// OldConfidence returns the old "confidence" field's value of the WordAlignment entity.
// If the WordAlignment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WordAlignmentMutation) OldConfidence(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfidence is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfidence requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfidence: %w", err)
	}
	return oldValue.Confidence, nil
}

// AddConfidence adds f to the "confidence" field.
func (m *WordAlignmentMutation) AddConfidence(f float64) {
	if m.addconfidence != nil {
		*m.addconfidence += f
	} else {
		m.addconfidence = &f
	}
}

// AddedConfidence returns the value that was added to the "confidence" field in this mutation.
func (m *WordAlignmentMutation) AddedConfidence() (r float64, exists bool) {
	v := m.addconfidence
	if v == nil {
		return
	}
	return *v, true
}

// ResetConfidence resets all changes to the "confidence" field.
func (m *WordAlignmentMutation) ResetConfidence() {
	m.confidence = nil
	m.addconfidence = nil
}

// AddCandidateIDs adds the "candidates" edge to the Candidate entity by ids.
func (m *WordAlignmentMutation) AddCandidateIDs(ids ...int) {
	if m.candidates == nil {
		m.candidates = make(map[int]struct{})
	}
	for i := range ids {
		m.candidates[ids[i]] = struct{}{}
	}
}

// ClearCandidates clears the "candidates" edge to the Candidate entity.
func (m *WordAlignmentMutation) ClearCandidates() {
	m.clearedcandidates = true
}

// CandidatesCleared reports if the "candidates" edge to the Candidate entity was cleared.
func (m *WordAlignmentMutation) CandidatesCleared() bool {
	return m.clearedcandidates
}

// RemoveCandidateIDs removes the "candidates" edge to the Candidate entity by IDs.
func (m *WordAlignmentMutation) RemoveCandidateIDs(ids ...int) {
	if m.removedcandidates == nil {
		m.removedcandidates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.candidates, ids[i])
		m.removedcandidates[ids[i]] = struct{}{}
	}
}

// RemovedCandidates returns the removed IDs of the "candidates" edge to the Candidate entity.
func (m *WordAlignmentMutation) RemovedCandidatesIDs() (ids []int) {
	for id := range m.removedcandidates {
		ids = append(ids, id)
	}
	return
}

// CandidatesIDs returns the "candidates" edge IDs in the mutation.
func (m *WordAlignmentMutation) CandidatesIDs() (ids []int) {
	for id := range m.candidates {
		ids = append(ids, id)
	}
	return
}

// ResetCandidates resets all changes to the "candidates" edge.
func (m *WordAlignmentMutation) ResetCandidates() {
	m.candidates = nil
	m.clearedcandidates = false
	m.removedcandidates = nil
}

// Where appends a list predicates to the WordAlignmentMutation builder.
func (m *WordAlignmentMutation) Where(ps ...predicate.WordAlignment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WordAlignmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WordAlignment).
func (m *WordAlignmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WordAlignmentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.start != nil {
		fields = append(fields, wordalignment.FieldStart)
	}
	if m.length != nil {
		fields = append(fields, wordalignment.FieldLength)
	}
	if m.word != nil {
		fields = append(fields, wordalignment.FieldWord)
	}
	if m.token != nil {
		fields = append(fields, wordalignment.FieldToken)
	}
	if m.confidence != nil {
		fields = append(fields, wordalignment.FieldConfidence)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WordAlignmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wordalignment.FieldStart:
		return m.Start()
	case wordalignment.FieldLength:
		return m.Length()
	case wordalignment.FieldWord:
		return m.Word()
	case wordalignment.FieldToken:
		return m.Token()
	case wordalignment.FieldConfidence:
		return m.Confidence()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WordAlignmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wordalignment.FieldStart:
		return m.OldStart(ctx)
	case wordalignment.FieldLength:
		return m.OldLength(ctx)
	case wordalignment.FieldWord:
		return m.OldWord(ctx)
	case wordalignment.FieldToken:
		return m.OldToken(ctx)
	case wordalignment.FieldConfidence:
		return m.OldConfidence(ctx)
	}
	return nil, fmt.Errorf("unknown WordAlignment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WordAlignmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wordalignment.FieldStart:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case wordalignment.FieldLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLength(v)
		return nil
	case wordalignment.FieldWord:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWord(v)
		return nil
	case wordalignment.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case wordalignment.FieldConfidence:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfidence(v)
		return nil
	}
	return fmt.Errorf("unknown WordAlignment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WordAlignmentMutation) AddedFields() []string {
	var fields []string
	if m.addstart != nil {
		fields = append(fields, wordalignment.FieldStart)
	}
	if m.addlength != nil {
		fields = append(fields, wordalignment.FieldLength)
	}
	if m.addconfidence != nil {
		fields = append(fields, wordalignment.FieldConfidence)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WordAlignmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case wordalignment.FieldStart:
		return m.AddedStart()
	case wordalignment.FieldLength:
		return m.AddedLength()
	case wordalignment.FieldConfidence:
		return m.AddedConfidence()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WordAlignmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case wordalignment.FieldStart:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStart(v)
		return nil
	case wordalignment.FieldLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLength(v)
		return nil
	case wordalignment.FieldConfidence:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConfidence(v)
		return nil
	}
	return fmt.Errorf("unknown WordAlignment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WordAlignmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WordAlignmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WordAlignmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WordAlignment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WordAlignmentMutation) ResetField(name string) error {
	switch name {
	case wordalignment.FieldStart:
		m.ResetStart()
		return nil
	case wordalignment.FieldLength:
		m.ResetLength()
		return nil
	case wordalignment.FieldWord:
		m.ResetWord()
		return nil
	case wordalignment.FieldToken:
		m.ResetToken()
		return nil
	case wordalignment.FieldConfidence:
		m.ResetConfidence()
		return nil
	}
	return fmt.Errorf("unknown WordAlignment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WordAlignmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.candidates != nil {
		edges = append(edges, wordalignment.EdgeCandidates)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WordAlignmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case wordalignment.EdgeCandidates:
		ids := make([]ent.Value, 0, len(m.candidates))
		for id := range m.candidates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WordAlignmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcandidates != nil {
		edges = append(edges, wordalignment.EdgeCandidates)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WordAlignmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case wordalignment.EdgeCandidates:
		ids := make([]ent.Value, 0, len(m.removedcandidates))
		for id := range m.removedcandidates {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WordAlignmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcandidates {
		edges = append(edges, wordalignment.EdgeCandidates)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WordAlignmentMutation) EdgeCleared(name string) bool {
	switch name {
	case wordalignment.EdgeCandidates:
		return m.clearedcandidates
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WordAlignmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown WordAlignment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WordAlignmentMutation) ResetEdge(name string) error {
	switch name {
	case wordalignment.EdgeCandidates:
		m.ResetCandidates()
		return nil
	}
	return fmt.Errorf("unknown WordAlignment edge %s", name)
}
