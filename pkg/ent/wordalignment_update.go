// Code generated by entc, DO NOT EDIT.

package ent

import (
	"asr-demo-server/pkg/ent/candidate"
	"asr-demo-server/pkg/ent/predicate"
	"asr-demo-server/pkg/ent/wordalignment"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordAlignmentUpdate is the builder for updating WordAlignment entities.
type WordAlignmentUpdate struct {
	config
	hooks    []Hook
	mutation *WordAlignmentMutation
}

// Where appends a list predicates to the WordAlignmentUpdate builder.
func (wau *WordAlignmentUpdate) Where(ps ...predicate.WordAlignment) *WordAlignmentUpdate {
	wau.mutation.Where(ps...)
	return wau
}

// SetStart sets the "start" field.
func (wau *WordAlignmentUpdate) SetStart(f float64) *WordAlignmentUpdate {
	wau.mutation.ResetStart()
	wau.mutation.SetStart(f)
	return wau
}

// AddStart adds f to the "start" field.
func (wau *WordAlignmentUpdate) AddStart(f float64) *WordAlignmentUpdate {
	wau.mutation.AddStart(f)
	return wau
}

// SetLength sets the "length" field.
func (wau *WordAlignmentUpdate) SetLength(f float64) *WordAlignmentUpdate {
	wau.mutation.ResetLength()
	wau.mutation.SetLength(f)
	return wau
}

// AddLength adds f to the "length" field.
func (wau *WordAlignmentUpdate) AddLength(f float64) *WordAlignmentUpdate {
	wau.mutation.AddLength(f)
	return wau
}

// SetWord sets the "word" field.
func (wau *WordAlignmentUpdate) SetWord(s string) *WordAlignmentUpdate {
	wau.mutation.SetWord(s)
	return wau
}

// SetToken sets the "token" field.
func (wau *WordAlignmentUpdate) SetToken(s string) *WordAlignmentUpdate {
	wau.mutation.SetToken(s)
	return wau
}

// SetConfidence sets the "confidence" field.
func (wau *WordAlignmentUpdate) SetConfidence(f float64) *WordAlignmentUpdate {
	wau.mutation.ResetConfidence()
	wau.mutation.SetConfidence(f)
	return wau
}

// AddConfidence adds f to the "confidence" field.
func (wau *WordAlignmentUpdate) AddConfidence(f float64) *WordAlignmentUpdate {
	wau.mutation.AddConfidence(f)
	return wau
}

// AddCandidateIDs adds the "candidates" edge to the Candidate entity by IDs.
func (wau *WordAlignmentUpdate) AddCandidateIDs(ids ...int) *WordAlignmentUpdate {
	wau.mutation.AddCandidateIDs(ids...)
	return wau
}

// AddCandidates adds the "candidates" edges to the Candidate entity.
func (wau *WordAlignmentUpdate) AddCandidates(c ...*Candidate) *WordAlignmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wau.AddCandidateIDs(ids...)
}

// Mutation returns the WordAlignmentMutation object of the builder.
func (wau *WordAlignmentUpdate) Mutation() *WordAlignmentMutation {
	return wau.mutation
}

// ClearCandidates clears all "candidates" edges to the Candidate entity.
func (wau *WordAlignmentUpdate) ClearCandidates() *WordAlignmentUpdate {
	wau.mutation.ClearCandidates()
	return wau
}

// RemoveCandidateIDs removes the "candidates" edge to Candidate entities by IDs.
func (wau *WordAlignmentUpdate) RemoveCandidateIDs(ids ...int) *WordAlignmentUpdate {
	wau.mutation.RemoveCandidateIDs(ids...)
	return wau
}

// RemoveCandidates removes "candidates" edges to Candidate entities.
func (wau *WordAlignmentUpdate) RemoveCandidates(c ...*Candidate) *WordAlignmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wau.RemoveCandidateIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wau *WordAlignmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wau.hooks) == 0 {
		if err = wau.check(); err != nil {
			return 0, err
		}
		affected, err = wau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WordAlignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wau.check(); err != nil {
				return 0, err
			}
			wau.mutation = mutation
			affected, err = wau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wau.hooks) - 1; i >= 0; i-- {
			if wau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wau *WordAlignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := wau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wau *WordAlignmentUpdate) Exec(ctx context.Context) error {
	_, err := wau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wau *WordAlignmentUpdate) ExecX(ctx context.Context) {
	if err := wau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wau *WordAlignmentUpdate) check() error {
	if v, ok := wau.mutation.Start(); ok {
		if err := wordalignment.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf("ent: validator failed for field \"start\": %w", err)}
		}
	}
	if v, ok := wau.mutation.Length(); ok {
		if err := wordalignment.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf("ent: validator failed for field \"length\": %w", err)}
		}
	}
	if v, ok := wau.mutation.Word(); ok {
		if err := wordalignment.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf("ent: validator failed for field \"word\": %w", err)}
		}
	}
	if v, ok := wau.mutation.Confidence(); ok {
		if err := wordalignment.ConfidenceValidator(v); err != nil {
			return &ValidationError{Name: "confidence", err: fmt.Errorf("ent: validator failed for field \"confidence\": %w", err)}
		}
	}
	return nil
}

func (wau *WordAlignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wordalignment.Table,
			Columns: wordalignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wordalignment.FieldID,
			},
		},
	}
	if ps := wau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wau.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldStart,
		})
	}
	if value, ok := wau.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldStart,
		})
	}
	if value, ok := wau.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldLength,
		})
	}
	if value, ok := wau.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldLength,
		})
	}
	if value, ok := wau.mutation.Word(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wordalignment.FieldWord,
		})
	}
	if value, ok := wau.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wordalignment.FieldToken,
		})
	}
	if value, ok := wau.mutation.Confidence(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldConfidence,
		})
	}
	if value, ok := wau.mutation.AddedConfidence(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldConfidence,
		})
	}
	if wau.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wordalignment.CandidatesTable,
			Columns: []string{wordalignment.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !wau.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wordalignment.CandidatesTable,
			Columns: []string{wordalignment.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wau.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wordalignment.CandidatesTable,
			Columns: []string{wordalignment.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wordalignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WordAlignmentUpdateOne is the builder for updating a single WordAlignment entity.
type WordAlignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WordAlignmentMutation
}

// SetStart sets the "start" field.
func (wauo *WordAlignmentUpdateOne) SetStart(f float64) *WordAlignmentUpdateOne {
	wauo.mutation.ResetStart()
	wauo.mutation.SetStart(f)
	return wauo
}

// AddStart adds f to the "start" field.
func (wauo *WordAlignmentUpdateOne) AddStart(f float64) *WordAlignmentUpdateOne {
	wauo.mutation.AddStart(f)
	return wauo
}

// SetLength sets the "length" field.
func (wauo *WordAlignmentUpdateOne) SetLength(f float64) *WordAlignmentUpdateOne {
	wauo.mutation.ResetLength()
	wauo.mutation.SetLength(f)
	return wauo
}

// AddLength adds f to the "length" field.
func (wauo *WordAlignmentUpdateOne) AddLength(f float64) *WordAlignmentUpdateOne {
	wauo.mutation.AddLength(f)
	return wauo
}

// SetWord sets the "word" field.
func (wauo *WordAlignmentUpdateOne) SetWord(s string) *WordAlignmentUpdateOne {
	wauo.mutation.SetWord(s)
	return wauo
}

// SetToken sets the "token" field.
func (wauo *WordAlignmentUpdateOne) SetToken(s string) *WordAlignmentUpdateOne {
	wauo.mutation.SetToken(s)
	return wauo
}

// SetConfidence sets the "confidence" field.
func (wauo *WordAlignmentUpdateOne) SetConfidence(f float64) *WordAlignmentUpdateOne {
	wauo.mutation.ResetConfidence()
	wauo.mutation.SetConfidence(f)
	return wauo
}

// AddConfidence adds f to the "confidence" field.
func (wauo *WordAlignmentUpdateOne) AddConfidence(f float64) *WordAlignmentUpdateOne {
	wauo.mutation.AddConfidence(f)
	return wauo
}

// AddCandidateIDs adds the "candidates" edge to the Candidate entity by IDs.
func (wauo *WordAlignmentUpdateOne) AddCandidateIDs(ids ...int) *WordAlignmentUpdateOne {
	wauo.mutation.AddCandidateIDs(ids...)
	return wauo
}

// AddCandidates adds the "candidates" edges to the Candidate entity.
func (wauo *WordAlignmentUpdateOne) AddCandidates(c ...*Candidate) *WordAlignmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wauo.AddCandidateIDs(ids...)
}

// Mutation returns the WordAlignmentMutation object of the builder.
func (wauo *WordAlignmentUpdateOne) Mutation() *WordAlignmentMutation {
	return wauo.mutation
}

// ClearCandidates clears all "candidates" edges to the Candidate entity.
func (wauo *WordAlignmentUpdateOne) ClearCandidates() *WordAlignmentUpdateOne {
	wauo.mutation.ClearCandidates()
	return wauo
}

// RemoveCandidateIDs removes the "candidates" edge to Candidate entities by IDs.
func (wauo *WordAlignmentUpdateOne) RemoveCandidateIDs(ids ...int) *WordAlignmentUpdateOne {
	wauo.mutation.RemoveCandidateIDs(ids...)
	return wauo
}

// RemoveCandidates removes "candidates" edges to Candidate entities.
func (wauo *WordAlignmentUpdateOne) RemoveCandidates(c ...*Candidate) *WordAlignmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wauo.RemoveCandidateIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wauo *WordAlignmentUpdateOne) Select(field string, fields ...string) *WordAlignmentUpdateOne {
	wauo.fields = append([]string{field}, fields...)
	return wauo
}

// Save executes the query and returns the updated WordAlignment entity.
func (wauo *WordAlignmentUpdateOne) Save(ctx context.Context) (*WordAlignment, error) {
	var (
		err  error
		node *WordAlignment
	)
	if len(wauo.hooks) == 0 {
		if err = wauo.check(); err != nil {
			return nil, err
		}
		node, err = wauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WordAlignmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wauo.check(); err != nil {
				return nil, err
			}
			wauo.mutation = mutation
			node, err = wauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wauo.hooks) - 1; i >= 0; i-- {
			if wauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wauo *WordAlignmentUpdateOne) SaveX(ctx context.Context) *WordAlignment {
	node, err := wauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wauo *WordAlignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := wauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wauo *WordAlignmentUpdateOne) ExecX(ctx context.Context) {
	if err := wauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wauo *WordAlignmentUpdateOne) check() error {
	if v, ok := wauo.mutation.Start(); ok {
		if err := wordalignment.StartValidator(v); err != nil {
			return &ValidationError{Name: "start", err: fmt.Errorf("ent: validator failed for field \"start\": %w", err)}
		}
	}
	if v, ok := wauo.mutation.Length(); ok {
		if err := wordalignment.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf("ent: validator failed for field \"length\": %w", err)}
		}
	}
	if v, ok := wauo.mutation.Word(); ok {
		if err := wordalignment.WordValidator(v); err != nil {
			return &ValidationError{Name: "word", err: fmt.Errorf("ent: validator failed for field \"word\": %w", err)}
		}
	}
	if v, ok := wauo.mutation.Confidence(); ok {
		if err := wordalignment.ConfidenceValidator(v); err != nil {
			return &ValidationError{Name: "confidence", err: fmt.Errorf("ent: validator failed for field \"confidence\": %w", err)}
		}
	}
	return nil
}

func (wauo *WordAlignmentUpdateOne) sqlSave(ctx context.Context) (_node *WordAlignment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wordalignment.Table,
			Columns: wordalignment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wordalignment.FieldID,
			},
		},
	}
	id, ok := wauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WordAlignment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wordalignment.FieldID)
		for _, f := range fields {
			if !wordalignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wordalignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wauo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldStart,
		})
	}
	if value, ok := wauo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldStart,
		})
	}
	if value, ok := wauo.mutation.Length(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldLength,
		})
	}
	if value, ok := wauo.mutation.AddedLength(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldLength,
		})
	}
	if value, ok := wauo.mutation.Word(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wordalignment.FieldWord,
		})
	}
	if value, ok := wauo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wordalignment.FieldToken,
		})
	}
	if value, ok := wauo.mutation.Confidence(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldConfidence,
		})
	}
	if value, ok := wauo.mutation.AddedConfidence(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: wordalignment.FieldConfidence,
		})
	}
	if wauo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wordalignment.CandidatesTable,
			Columns: []string{wordalignment.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: candidate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.RemovedCandidatesIDs(); len(nodes) > 0 && !wauo.mutation.CandidatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wordalignment.CandidatesTable,
			Columns: []string{wordalignment.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wauo.mutation.CandidatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   wordalignment.CandidatesTable,
			Columns: []string{wordalignment.CandidatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: candidate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WordAlignment{config: wauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wordalignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
